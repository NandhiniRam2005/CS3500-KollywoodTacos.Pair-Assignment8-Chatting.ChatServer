@page "/snake"
@*
    The following line forces the code to run on the webserver.

    Notice that we run this code on the web server so that
    it has access to the network. If you run this as web assembly
    (i.e., on the browser) it would not be able to connect to
    the snake server using our networking code.
*@
@rendermode InteractiveServer
@implements IDisposable

@using Blazor.Extensions
@using Blazor.Extensions.Canvas
@using Blazor.Extensions.Canvas.Canvas2D
@using System.Drawing
@using CS3500.Networking
@using System.Diagnostics
@using Microsoft.Extensions.Logging.Abstractions
@using System.Net.Sockets
@using System.Text.Json
@using global::Snake.Client.Models

@inject IJSRuntime JsRuntime;
@inject ILogger<Program> Logger;

<PageTitle> Networking Example</PageTitle>

<h1>Lab 12 Example</h1>
<p> Networking </p>

@if (!server.IsConnected)
{
	<button class="btn btn-primary" @onclick="Connect">Connect</button>
}

<div id="myCanvas">
	<BECanvas Width="500" Height="500" @ref="canvasReference" />
</div>

@code
{
	// Drawing/Canvas variables here.
	private BECanvasComponent canvasReference = null!;
	private Canvas2DContext context = null!;

	// GUI Model here:
	private int GUIWidth = 800, GUIHeight = 800;
	private DateTime StartTime = DateTime.Now;
	private int frameNumberGUI = 0;
	private string errorMessage = string.Empty;

	// WORLD Model here:
	private World worldModel = new World();

	// Controller Model here:
	private IJSObjectReference _jsModule = null!;

	// Network model
	private NetworkConnection server = new(NullLogger.Instance);
	private string networkStatus = "Waiting For You to Connect";
	private int frameNumberNetwork = 0;
	private DateTime ConnectTime = DateTime.Now;

	/// <summary>
	///   First step in the Blazor Page Life Cycle.  In some circumstances
	///   you would load data here.  We do not need to.
	/// </summary>
	protected override void OnInitialized()
	{

	}

	/// <summary>
	///   The first time we start up, we load our JavaScript and start the animation
	///   process.
	/// </summary>
	/// <param name="firstRender"></param>
	/// <returns></returns>
	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			_jsModule = await JsRuntime.InvokeAsync<IJSObjectReference>("import", "./Pages/SnakePage.razor.js");
			context = await canvasReference.CreateCanvas2DAsync();

			await _jsModule.InvokeVoidAsync("initJS", DotNetObjectReference.Create(this));
			await _jsModule.InvokeVoidAsync("ToggleAnimation", true);
		}
	}

	/// <summary>
	///   Attempt to connect to the server and begin the drawing process.
	/// </summary>
	private async void Connect()
	{
		Logger.LogInformation("Connecting!");

		await Task.Run(() =>
		{
			errorMessage = string.Empty;
			networkStatus = "Connecting...";
			try
			{
				server.Connect("localhost", 11000);
				networkStatus = "Connected";
				ConnectTime = DateTime.Now;
			}
			catch (Exception e)
			{
				errorMessage = e.Message;
				networkStatus = "Error";
			}
		});

		StateHasChanged();

		var worldJSON = "";
		int jsonLinesPrinted = 0;
		// Once the server has connected do all this good stuff.
		if (server.IsConnected)
		{
			server.Send("ImASnek\n"); // Sends the name of the snake.
			server.ReadLine();
			worldModel.WorldSize = int.Parse(server.ReadLine()); // Maybe switch tryParse
			await Task.Run(() =>
			{
				try
				{
					while (true)
					{

						worldJSON = server.ReadLine();

						lock (worldModel)
						{
							worldModel.load(worldJSON);

						}
					}
				}
				catch (Exception e)
				{
					errorMessage = e.Message;
					networkStatus = "Error";
				}

				Logger.LogError("Connection must have failed.");
			});
		}
	}

	/// <summary>
	///   Draw the world
	/// </summary>
	/// <param name="timeStamp">
	///   Tells you how many milliseconds have
	///   elapsed sense the web page was loaded.
	/// </param>
	[JSInvokable]
	public async void Draw(double timeStamp = 0)
	{
		frameNumberGUI++;

		double fps = frameNumberGUI / (double)(DateTime.Now - StartTime).TotalSeconds;
		double nps = frameNumberNetwork / (double)(DateTime.Now - ConnectTime).TotalSeconds;
		int timeInSeconds = (int)(timeStamp / 1000);

		try
		{
			// Group all the draw commands into one large single draw.
			await context.BeginBatchAsync();

			// Draw Background.
			await context.SetFillStyleAsync("darkblue");
			await context.FillRectAsync(0, 0, GUIWidth, GUIHeight);

			// Draw "World Model" (i.e., rectangles)
			List<Rectangle> worldCopy = new();
			// lock (worldModel)
			// {
			// 	worldCopy = worldModel.ToList();
			// }

			foreach (var rectangle in worldCopy)
			{
				await context.SetFillStyleAsync("lightblue");
				await context.FillRectAsync(rectangle.X, rectangle.Y, rectangle.Width, rectangle.Height);
			}

			// Draw Heads Up Display - do this last so it is on top
			await context.SetFontAsync("30px Arial");
			await context.SetFillStyleAsync("white");
			await context.FillTextAsync($"G-Frame: {frameNumberGUI}", 10, 30);
			await context.FillTextAsync($"N-Frame: {frameNumberNetwork}", 10, 60);
			await context.FillTextAsync($"FPS: {fps:F1}", 400, 30);
			await context.FillTextAsync($"NPS: {nps:F1}", 400, 60);
			await context.FillTextAsync($"Elapsed: {timeInSeconds:F0} seconds", 550, 30);
			await context.FillTextAsync($"Network: {networkStatus}", 10, 90);
			await context.FillTextAsync($"{errorMessage}", 10, 120);

			await context.EndBatchAsync();
		}
		catch (Exception e)
		{

		}
	}

	/// <summary>
	///   <para>
	///     This method is called from the JavaScript side of the
	///     browser.
	///   </para>
	///   <remarks>
	///      Must be PUBLIC for JavaScript to call!
	///   </remarks>
	/// </summary>
	/// <param name="width"></param>
	/// <param name="height"></param>
	[JSInvokable]
	public void ResizeInBlazor(int width, int height)
	{
		Logger.LogTrace("Resizing the web page. {width} {height}", width, height);
		GUIWidth = Math.Min(Math.Max(100, width), 1000);
		GUIHeight = Math.Min(Math.Max(100, height), 1000);
	}

	/// <summary>
	///   Called by the system when the page is navigated away from.
	///   Note: sometimes the debugger will create a "dummy" page when
	///   first navigated to, then dispose it, then create the actual page.
	///   You can ignore this behavior.
	/// </summary>
	public void Dispose()
	{
		_jsModule.InvokeVoidAsync("ToggleAnimation", false);
	}
}
